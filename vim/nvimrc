" This is a nvim rc file ment for a *nix system.  It has the following
" requirements:
"
"	1.	custom hybrid material theme for gvim
"		included in this repo as hm.vim
"
"	2.	the DejaVu Sans Mono for Powerline font
"		https://github.com/powerline/fonts
"
"	3.	plug package manager
"		https://github.com/junegunn/vim-plug
"
"	4.	fzf for fuzzy find on EVERYTHING!
"		https://github.com/junegunn/fzf
"
"	5.	Ag (a.k.a. the silver sercher)
"		https://github.com/ggreer/the_silver_searcher
"
"	6.	vim-latex
"		http://vim-latex.sourceforge.net/index.php?subject=download&title=Download

" UI Config {{{
set modelines=1					" check end of file for folding instructions
set number						" this sets line numbers
set showcmd						" we probably won't need this
set cursorline					" highlight current line
set wildmenu					" visual auto complete for command menu
set wildmode=list:longest		" When more than one match, list all matchas and complete till longest common string
set lazyredraw					" redraw only when we need to.
set showmatch					" when passing over a bracket, briefly jump to matching bracket.
set guioptions-=T				" remove tool bar
set guioptions-=m				" remove menu bar
set guioptions-=r				" remove right scrollbar
set guioptions-=L				" remove left scrollbar
set ruler						" keep track for row/column
set titlestring=%{getcwd()}		" set the window title to the PWD
set hidden						" buffers remain in memory when switching to a different one
set history=10000				" : command line history
set wrap! linebreak nolist		" set wrap options for when wrap is toggled
set hlsearch					" highlight words when searching (turn this off with return)
set autoread
set list
set listchars=tab:▶\ ,eol:¬		" show tabs and EOL as characters
set tabstop=4					" number of visual spaces per TAB
set softtabstop=4				" number of spaces in tab when editing
set shiftwidth=4				" this is for justification using > and <
set grepprg=grep\ -nH\ $		" set grep for .tex reference completion
set scrolloff=3

filetype plugin on				" needed for vim-latex
filetype indent on				" load file type specific indent files
filetype off					" required

au FocusLost * silent! wa		" save all windows on lose focus
" }}}
" Folding {{{
set foldenable			" enable folding
set foldlevelstart=10	" start folding then we are 10 blocks deep
set foldnestmax=10		" 10 nested fold max
set foldmethod=indent	" fold based on indent level
" }}}
" Remaps {{{
" navigate between buffers using tab and shift+tab
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" highlight last inserted text
nnoremap gV `[v`]

" use jk for exiting insert mode
inoremap jk <esc>

" return turns off search highlighting
nnoremap <CR> :nohlsearch<CR>

" space open/closes folds
nnoremap <space> za

" toggle spell check
map <F7> :setlocal spell! spelllang=en_us<CR>

" save and compile latex
nnoremap <F2> :w<CR><leader>ll

map <C-n> :NERDTreeToggle<CR>
" }}}
" Leader Shortcuts {{{
" leader is comma
let mapleader=","

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" edit vimrc
nnoremap <leader>ev :vsp $MYVIMRC<CR>

" edit zshrc
nnoremap <leader>ez :vsp ~/.zshrc<CR>

" reload vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>

" open ag.vim **note, the space at the end is there for a reason!
nnoremap <leader>a :Ag 

" next tab
nnoremap <leader><TAB> :tabnext<CR>

" previous tab
nnoremap <leader><S-TAB> :tabprevious<CR>

" new tab using current buffer
nnoremap <leader>n :tabe %<CR>

" close tab
nnoremap <leader>c :tabclose<CR>

" toggle wrap, specal symbols dissappear when wrap is toggled, so this reset symbols
nnoremap <leader>w :set wrap! linebreak nolist <CR> :set list <CR> :set listchars=tab:▶\ ,eol:¬ <CR>

" save/update session
nnoremap <leader>m :call MakeSession()<CR>
" }}}
" Plugins {{{
let path=$HOME.'/.nvim/autoload/'

call plug#begin(path)
	Plug 'ervandew/supertab'				" better tab completion
	Plug 'bling/vim-airline'				" cool window decoration
	Plug 'tpope/vim-fugitive'				" git wrapper for vim
	Plug 'airblade/vim-gitgutter'			" self explainatory
	Plug 'rking/ag.vim'						" better global search
	Plug 'sjl/gundo.vim'					" tree undo history
	Plug 'moll/vim-bbye'					" close buffers without messing with window layout
	Plug 'scrooloose/syntastic'				" syntax checking magic
	Plug 'tpope/vim-commentary'				" hot-keys for commenting stuff out
	Plug 'justinmk/vim-syntax-extra'		" more syntax highlighting
	Plug 'kshenoy/vim-signature'			" show marks
	Plug 'hdima/python-syntax'				" better python syntax
	Plug 'vim-scripts/autotags'				" autoupdate your ctags files
	Plug 'critiqjo/lldb.nvim'				" debugging support
	Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
	Plug 'junegunn/fzf.vim'					" fantastically fast fuzzy find
	Plug 'scrooloose/nerdtree'				" browse files while vimming
"	Plug 'Floobits/floobits-neovim'		" paired programming!
call plug#end()
" }}}
" FZF Settings {{{
map <C-p> :Files .<CR>
" }}}
" Syntastic Settings {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" }}}
" Backups {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
"}}}
" Custom Functions {{{
" Go away and Come back.  This script auto saves session info and loads it.

" Get cwd string
function! GetCwdString()
	let a:cwd_string = getcwd()
	let a:cwd_string = substitute(a:cwd_string, '/', '', '')
	let a:cwd_string = substitute(a:cwd_string, '/', '_', 'g')
	let a:cwd_string = substitute(a:cwd_string, ' ', '_', 'g')
	let a:cwd_string = substitute(a:cwd_string, '\', '_', 'g')

	return a:cwd_string
endfunction

" Creates a session
function! MakeSession()
	let a:cwd_string = GetCwdString()
	let b:sessiondir = $HOME."/.nvim/sessions/" . a:cwd_string
	let b:sessionfile = b:sessiondir . '_session.vim'
	exe "mksession! " . b:sessionfile
endfunction

" Updates a session, BUT ONLY IF IT ALREADY EXISTS
function! UpdateSession()
	let a:cwd_string = GetCwdString()
	let b:sessiondir = $HOME."/.nvim/sessions/" . a:cwd_string
	let b:sessionfile = b:sessiondir . "_session.vim"
	if (filereadable(b:sessionfile))
		exe "mksession! " . b:sessionfile
		echo "updating session"
	endif
endfunction

" Loads a session if it exists
function! LoadSession()
	let a:cwd_string = GetCwdString()
	let b:sessiondir = $HOME."/.nvim/sessions/" . a:cwd_string
	let b:sessionfile = b:sessiondir . "_session.vim"
	if (filereadable(b:sessionfile))
		exe 'source ' b:sessionfile
	else
		echo "No session loaded."
	endif
endfunction

au VimEnter * nested :call LoadSession()
au VimLeave * :call UpdateSession()
"}}}
" Appearance {{{ 
syntax enable "enable syntax processing

set fillchars+=vert:│
"set t_Co=256
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"
let g:hybrid_use_Xresources = 1
set background=dark
colorscheme hm
set colorcolumn=81										" a ruler to make off the 80th column
" }}}
" Airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_right_sep=''
let g:airline_left_sep=''
let g:airline_theme='bubblegum'
set laststatus=2 " for air line so the status bar at the bottom always displays
" }}}
" Vim LaTeX {{{
let g:tex_flavor='latex'		" use latex package with .tex files
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_CompileRule_dvi = 'latex "%" --interaction=nonstopmode $*'
" }}}

" vim:foldmethod=marker:foldlevel=0
