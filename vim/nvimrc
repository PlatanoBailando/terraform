" This is a nvim rc file ment for a *nix system.  It has the following
" requirements:
"
"" 	1. 	custom hybrid material theme for gvim
" 		https://github.com/tomasr/molokai
"
" 	2.  	The DejaVu Sans Mono for Powerline font
"		https://github.com/powerline/fonts
"
" 	3. 	plug package manager
	" 	https://github.com/junegunn/vim-plug
"
" 	4. 	Ag (a.k.a. the silver sercher)
" 		https://github.com/ggreer/the_silver_searcher
"
" 	5.	vim-latex
"		http://vim-latex.sourceforge.net/index.php?subject=download&title=Download

" UI Config {{{
set modelines=1					" check end of file for folding instructions
set number						" this sets line numbers
set showcmd						" we probably won't need this
set cursorline					" highlight current line
set wildmenu					" visual auto complete for command menu
set wildmode=list:longest		" When more than one match, list all matchas and complete till longest common string
set lazyredraw					" redraw only when we need to.
set showmatch					" when passing over a bracket, briefly jump to matching bracket.
set guioptions-=T				" remove tool bar
set guioptions-=m				" remove menu bar
set guioptions-=r				" remove right scrollbar
set guioptions-=L				" remove left scrollbar
set ruler						" keep track for row/column
set titlestring=%{getcwd()}		" set the window title to the PWD
set hidden						" buffers remain in memory when switching to a different one
set history=10000				" : command line history
set wrap! linebreak nolist		" set wrap options for when wrap is toggled
set hlsearch					" highlight words when searching (turn this off with return)
set autoread
set list
set listchars=tab:▶\ ,eol:¬		" show tabs and EOL as characters
set tabstop=4					" number of visual spaces per TAB
set softtabstop=4				" number of spaces in tab when editing
set shiftwidth=4				" this is for justification using > and <
set grepprg=grep\ -nH\ $		" set grep for .tex reference completion

filetype plugin on				" needed for vim-latex
filetype indent on				" load file type specific indent files
filetype off					" required

au FocusLost * silent! wa		" save all windows on lose focus
" }}}
" Folding {{{
set foldenable			" enable folding
set foldlevelstart=10	" start folding then we are 10 blocks deep
set foldnestmax=10		" 10 nested fold max
set foldmethod=syntax	" fold based on indent level
" }}}
" Remaps {{{
" navigate between buffers using tab and shift+tab
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" highlight last inserted text
nnoremap gV `[v`]

" use jk for exiting insert mode
inoremap jk <esc>

" return turns off search highlighting
nnoremap <CR> :nohlsearch<CR>

" space open/closes folds
nnoremap <space> za

" toggle spell check
map <F3> :setlocal spell! spelllang=en_us<CR>

" save and compile latex
nnoremap <F2> :w<CR><leader>ll
" }}}
" Leader Shortcuts {{{
" leader is comma
let mapleader=","

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" edit vimrc
nnoremap <leader>ev :vsp $MYVIMRC<CR>

" edit zshrc
nnoremap <leader>ez :vsp ~/.zshrc<CR>

" reload vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>

" save session
nnoremap <leader>s :mksession<CR>

" open ag.vim **note, the space at the end is there for a reason!
nnoremap <leader>a :Ag 

" next tab
nnoremap <leader><TAB> :tabnext<CR>

" previous tab
nnoremap <leader><S-TAB> :tabprevious<CR>

" new tab using current buffer
nnoremap <leader>n :tabe %<CR>

" close tab
nnoremap <leader>c :tabclose<CR>

" toggle wrap, specal symbols dissappear when wrap is toggled, so this reset symbols
nnoremap <leader>w :set wrap! linebreak nolist <CR> :set list <CR> :set listchars=tab:▶\ ,eol:¬ <CR>
" }}}
" Plugins {{{
let path='~/.nvim/autoload/'

call plug#begin(path)
	Plug 'kien/ctrlp.vim'					" fuzzy find on files
	Plug 'ervandew/supertab'				" better tab completion
	Plug 'bling/vim-airline'				" cool window decoration
	Plug 'tpope/vim-fugitive'				" git wrapper for vim
	Plug 'airblade/vim-gitgutter'			" self explainatory
	Plug 'rking/ag.vim'						" better global search
	Plug 'sjl/gundo.vim'					" tree undo history
	Plug 'moll/vim-bbye'					" close buffers without messing with window layout
	Plug 'scrooloose/syntastic'				" syntax checking magic
	Plug 'tpope/vim-commentary'				" hot-keys for commenting stuff out
	Plug 'justinmk/vim-syntax-extra'		" more syntax highlighting
	Plug 'kshenoy/vim-signature'			" show marks
	Plug 'hdima/python-syntax'				" better python syntax
	Plug 'vim-scripts/autotags'				" autoupdate your ctags files
	Plug 'critiqjo/lldb.nvim'				" debugging support
	Plug 'mhinz/vim-grepper'				" the grep that greps the hardest
"	Plug 'Floobits/floobits-neovim'		" paired programming!
	"Plug 'benekastah/neomake'				" A linter of bad-ass proportions
call plug#end()
" }}}
" CtrlP Settings {{{
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0

if has('win32')
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g "" --ignore=*.dll* --ignore=*/bin* --ignore=*.obj --ignore=*.png* --ignore=*.jpg* --ignore=*/srcJava* --ignore=*/srcNET* --ignore=*/javabin*'
elseif has('unix')
	let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
endif

map <C-p> :CtrlP<CR>
" }}}
" Syntastic Settings {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" }}}
" Grepper {{{ 

"nnoremap <leader>a  :Grepper! -tool ag  -open -switch<CR>

" }}}
" Backups {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
"}}}
" Custom Functions {{{
" Go away and Come back.  This script auto saves session info and loads it.

" todo; update this for linux
if has('win32')
	" Creates a session
	function! MakeSession()
		let a:cwd_string = getcwd()
		let a:cwd_string = substitute(a:cwd_string, ':', '', 'g') 
		let a:cwd_string = substitute(a:cwd_string, '/', '_', 'g')
		let a:cwd_string = substitute(a:cwd_string, ' ', '_', 'g')
		let a:cwd_string = substitute(a:cwd_string, '\', '_', 'g')

		let b:sessiondir = "C:/Program\ Files\ (x86)/vim/sessions/" . a:cwd_string
		if (filewritable(b:sessiondir) != 2)
			exe 'silent !mkdir -p ' b:sessiondir
			redraw!
		endif
		let b:sessionfile = b:sessiondir . '_session.vim'
		exe "mksession! " . b:sessionfile
	endfunction

	" Updates a session, BUT ONLY IF IT ALREADY EXISTS
	function! UpdateSession()
		if argc()==0
			let a:cwd_string = getcwd()
			let a:cwd_string = substitute(a:cwd_string, ':', '', 'g') 
			let a:cwd_string = substitute(a:cwd_string, '/', '_', 'g')
			let a:cwd_string = substitute(a:cwd_string, ' ', '_', 'g')
			let a:cwd_string = substitute(a:cwd_string, '\', '_', 'g')

			let b:sessiondir = "C:/Program\ Files\ (x86)/vim/sessions/" . a:cwd_string
			let b:sessionfile = b:sessiondir . "_session.vim"
			if (filereadable(b:sessionfile))
				exe "mksession! " . b:sessionfile
				echo "updating session"
			endif
		endif
	endfunction

	" Loads a session if it exists
	function! LoadSession()
		if argc() == 0
			let a:cwd_string = getcwd()
			let a:cwd_string = substitute(a:cwd_string, ':', '', 'g') 
			let a:cwd_string = substitute(a:cwd_string, '/', '_', 'g')
			let a:cwd_string = substitute(a:cwd_string, ' ', '_', 'g')
			let a:cwd_string = substitute(a:cwd_string, '\', '_', 'g')

			let b:sessiondir = "C:/Program\ Files\ (x86)/vim/sessions/" . a:cwd_string
			let b:sessionfile = b:sessiondir . "_session.vim"
			if (filereadable(b:sessionfile))
				exe 'source ' b:sessionfile
			else
				echo "No session loaded."
			endif
		else
			let b:sessionfile = ""
			let b:sessiondir = ""
		endif
	endfunction

	au VimEnter * nested :call LoadSession()
	au VimLeave * :call UpdateSession()
	map <leader>m :call MakeSession()<CR>
endif
"}}}
" Appearance {{{ 
syntax enable "enable syntax processing

set fillchars+=vert:│

if has("gui_running")
	set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 8	" a pretty font for gui

	colorscheme hybrid_material
	set colorcolumn=81										" a ruler to make off the 80th column

	" set the color of the color column
	hi ColorColumn guibg=#1a1a1a

	hi CursorLine guibg=#303030

	" git colors
	highlight GitGutterAdd guifg=#77dd5a
	highlight GitGutterAdd guibg=#222222
	highlight GitGutterChange guifg=#f7a554
	highlight GitGutterChange guibg=#222222
	highlight GitGutterDelete guifg=#f75454
	highlight GitGutterDelete guibg=#222222
	highlight GitGutterChangeDelete guifg=#f7a554
	highlight GitGutterChangeDelete guibg=#222222

	" spell check colors
	highlight SpellBad		term=Reverse	guisp=#f75454	gui=undercurl	guibg=#2D2D2D
	highlight SpellCap		term=Reverse	guisp=#5191ff	gui=undercurl	guibg=#2D2D2D
	highlight SpellLocal	term=Underline	guisp=#77dd5a	gui=undercurl	guibg=#2D2D2D
	highlight SpellRare		term=underline	guisp=#ae51ff	gui=undercurl	guibg=#2D2D2D
else
	"set term=xterm
    "set t_Co=256
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"
	let g:hybrid_use_Xresources = 1
	set background=dark
	colorscheme hybrid
	set colorcolumn=81										" a ruler to make off the 80th column
	"hi ColorColumn ctermbg=1
endif

" }}}
" Airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'

if has("gui_running")
	let g:airline_theme='tomorrow'
else
	let g:airline_theme='hybrid'
endif

set laststatus=2 " for air line so the status bar at the bottom always displays
" }}}
" Vim LaTeX {{{
let g:tex_flavor='latex'		" use latex package with .tex files
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_CompileRule_dvi = 'latex "%" --interaction=nonstopmode $*'
" }}}

" vim:foldmethod=marker:foldlevel=0
